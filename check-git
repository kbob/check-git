#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys

IGNORE_PATHS = [
    '.cargo/',
    '.multirust/',
]

def repo_is_ignored(repo):
    for path in IGNORE_PATHS:
        if repo.startswith(path):
            return True

def do_git(command, repo):
    command = ['git'] + command
    output = subprocess.check_output(command, cwd=repo)
    output = output.decode('utf-8')
    return output

def check_branch(status):
    m = re.search(r'On branch (.*)', status)
    if m:
        return m.group(1) != 'master' and m.group(0)
    m = re.search(r'HEAD detached .*', status)
    assert m, "can't find branch in {!r}".format(status)
    return m.group(0)

def check_ahead(status):
    m = re.search(r'Your branch is ahead of .*', status)
    if m:
        return m.group(0)

def check_changes(status, repo):
    if 'nothing to commit' not in status:
        return do_git(['status', '-s'], repo).rstrip()


def print_indented(string, prefix='  '):
    print(re.sub(r'^', prefix, string, flags=re.MULTILINE))


def check_git(print_stats=True, print_lists=True, print_repos=True):

    clean = []
    dirty = []
    branched = {}
    local_only = []

    for (dirpath, dirnames, filenames) in os.walk('.'):
        # print('path:', dirpath)
        if '.git' not in dirnames:
            continue
        repo = dirpath
        if dirpath.startswith('./'):
            repo = dirpath[2:]

        if repo_is_ignored(repo):
            continue

        status = do_git(['status'], repo)

        branch = check_branch(status)
        ahead = check_ahead(status)
        changes = check_changes(status, repo)
        remotes = do_git(['remote'], repo)
        stashes = do_git(['stash', 'list'], repo)

        if ahead or changes or stashes:
            dirty.append(repo)
            if print_repos:
                print(repo)
                if branch:
                    print_indented(branch)
                if ahead:
                    print_indented(ahead)
                if changes:
                    print_indented(changes)
                if stashes:
                    print_indented(stashes)
                print()
        else:
            clean.append(repo)

        if branch:
            branched[repo] = branch.replace('On branch ', '')

        if not remotes:
            local_only.append(repo)

    if print_repos and (print_lists or print_stats):
        print()
        print('------')

    if print_lists:
        if local_only:
            print('Repositories without Remotes')
            for repo in sorted(local_only):
                print_indented(repo)
            print()

        if branched:
            print('Branched Repositories')
            bwid = max(len(b) for b in branched.values())
            for repo in sorted(branched):
                print_indented('{:>{w}} {}'.format(branched[repo], repo, w=bwid))
            print()

        if clean:
            print('Clean Repositories:')
            for repo in sorted(clean):
                print_indented(repo)

        if print_stats:
            print()
            print('------')

    if print_stats:
        nc = len(clean)
        ncb = len([r for r in clean if r in branched])
        ncr = len([r for r in clean if r in local_only])
        nd = len(dirty)
        ndb = len([r for r in dirty if r in branched])
        ndr = len([r for r in dirty if r in local_only])
        nt = nc + nd
        w0 = len(str(max((nc, nd, nt))))
        w1 = len(str(max(ncb, ncr, ndb, ndr)))
        def repo_plural(n):
            return ('repositories', 'repository')[n == 1]
        # There is probably an easier way to align columns.
        print('Summary')
        print('  {0:{1}} clean {2}'.format(nc, w0, repo_plural(nc)))
        print('   {0:{1}} branched'.format(ncb, w0 + w1))
        print('   {0:{1}} remoteless'.format(ncr, w0 + w1))
        print('  {0:{1}} dirty {2}'.format(nd, w0, repo_plural(nd)))
        print('   {0:{1}} branched'.format(ndb, w0 + w1))
        print('   {0:{1}} remoteless'.format(ndr, w0 + w1))
        print('  ------')
        print('  {0:{1}} total {2}'.format(nt, w0, repo_plural(nt)))
        print()


def main(argv):
    d = 'Check git repos for unfinished work.'
    parser = argparse.ArgumentParser(description=d)
    parser.add_argument('-s', '--summary',
                        action='store_const', const=True,
                        help='show summary only')
    args = parser.parse_args(sys.argv[1:])
    # print(args)
    # exit()
    print_repos = not args.summary
    print_lists = not args.summary
    print_stats = True
    check_git(print_repos=print_repos,
              print_lists=print_lists,
              print_stats=print_stats)

if __name__ == '__main__':
    main(sys.argv)
